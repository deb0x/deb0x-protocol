{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "forwarder",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					}
				],
				"name": "ClientFeesClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ClientRewardsClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					}
				],
				"name": "FeesClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "value",
						"type": "bytes32"
					}
				],
				"name": "KeySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "calculatedCycleReward",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "summedCycleStakes",
						"type": "uint256"
					}
				],
				"name": "NewCycleStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"name": "RewardsClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "sentId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "feeReceiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "msgFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nativeTokenFee",
						"type": "uint256"
					}
				],
				"name": "SendEntryCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "hash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "sentId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32[]",
						"name": "content",
						"type": "bytes32[]"
					}
				],
				"name": "Sent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "cycle",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Unstaked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_BPS",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PROTOCOL_FEE",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SCALING_FACTOR",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accAccruedFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accCycleGasOwed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accCycleGasUsed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accFirstStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accSecondStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "accStakeCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "accWithdrawableStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimClientFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimClientRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "clientAccruedFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "clientCycleGasEarned",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "clientLastFeeUpdate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "clientLastRewardUpdate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "clientRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentCycleReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentStartedCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "cycleAccruedFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "cycleFeesPerStakeSummed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "cycleTotalGasUsed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dbx",
				"outputs": [
					{
						"internalType": "contract Deb0xERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "i_initialTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "i_periodDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "forwarder",
						"type": "address"
					}
				],
				"name": "isTrustedForwarder",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "lastActiveCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastCycleReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "lastFeeUpdateCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastStartedCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingStakeWithdrawal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "previousStartedCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "publicKeys",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rewardPerCycle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "bytes32[][]",
						"name": "crefs",
						"type": "bytes32[][]"
					},
					{
						"internalType": "address",
						"name": "feeReceiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "msgFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "nativeTokenFee",
						"type": "uint256"
					}
				],
				"name": "send",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sentId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "publicKey",
						"type": "bytes32"
					}
				],
				"name": "setKey",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "summedCycleStakes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"ClientFeesClaimed(uint256,address,uint256)": {
					"details": "Emitted when the client operating `account` claims an amount of `fees`  in native token through {claimClientFees} in `cycle`."
				},
				"ClientRewardsClaimed(uint256,address,uint256)": {
					"details": "Emitted when client operating `account` claims `amount` DBX  token rewards through {claimRewards} in `cycle`."
				},
				"FeesClaimed(uint256,address,uint256)": {
					"details": "Emitted when `account` claims an amount of `fees` in native token through {claimFees} in `cycle`."
				},
				"KeySet(address,bytes32)": {
					"details": "Emitted when calling {setKey}, `to` being assigned this key `value`."
				},
				"NewCycleStarted(uint256,uint256,uint256)": {
					"details": "Emitted when calling {send} marking the new current `cycle`, `calculatedCycleReward` and `summedCycleStakes`."
				},
				"RewardsClaimed(uint256,address,uint256)": {
					"details": "Emitted when `account` claims `amount` DBX  token rewards through {claimRewards} in `cycle`."
				},
				"SendEntryCreated(uint256,uint256,address,uint256,uint256)": {
					"details": "Emitted when calling {send} in the current `cycle`, containing the message details such as which `sentId` it has, who the `feeReceiver` is and what `msgFee` it set, respectively any additional `nativeTokenFee` that was paid."
				},
				"Sent(address,address,bytes32,uint256,uint256,bytes32[])": {
					"details": "Emitted when calling {send} containing the message  details such as `to` destination address, `from` sender address, `hash` of the content reference, `sentId`, `timestamp` and `content`."
				},
				"Staked(uint256,address,uint256)": {
					"details": "Emitted when `account` stakes `amount` DBX tokens through {stake} in `cycle`."
				},
				"Unstaked(uint256,address,uint256)": {
					"details": "Emitted when `account` unstakes `amount` DBX tokens through {unstake} in `cycle`."
				}
			},
			"kind": "dev",
			"methods": {
				"claimClientFees()": {
					"details": "Transfers newly accrued client fee share and transfers  the entire amount to caller address."
				},
				"claimClientRewards()": {
					"details": "Mints newly accrued client rewards share and transfers the entire  allocated amount to the transaction sender address."
				},
				"claimFees()": {
					"details": "Transfers newly accrued fees to sender's address."
				},
				"claimRewards()": {
					"details": "Mints newly accrued account rewards and transfers the entire  allocated amount to the transaction sender address."
				},
				"constructor": {
					"params": {
						"forwarder": "forwarder contract address."
					}
				},
				"getCurrentCycle()": {
					"details": "Returns the index of the cycle at the current block time."
				},
				"send(address[],bytes32[][],address,uint256,uint256)": {
					"details": "Sends messages to multiple accounts. Triggers helper functions  used to update cycle, rewards and fees related state. Optionally may include extra reward token fee and native coin fees on-top of the default protocol fee.  These fees are set in the client user intarface the transaction sender interacts with. ",
					"params": {
						"crefs": "content references to the messages.",
						"feeReceiver": "client address.",
						"msgFee": "on-top reward token fee charged by the client (in basis points). If 0, no reward token fee applies.",
						"nativeTokenFee": "on-top native coin fee charged by the client. If 0, no native token fee applies.",
						"to": "account addresses to send messages to."
					}
				},
				"setKey(bytes32)": {
					"details": "Stores the public key of the sender account. ",
					"params": {
						"publicKey": "as encoded by the client."
					}
				},
				"stake(uint256)": {
					"details": "Stakes the given amount and increases the share of the daily allocated fees. The tokens are transfered from sender account to this contract. To receive the tokens back, the unstake function must be called by the same account address. ",
					"params": {
						"amount": "token amount to be staked (in wei)."
					}
				},
				"unstake(uint256)": {
					"details": "Unstakes the given amount and decreases the share of the daily allocated fees. If the balance is availabe, the tokens are transfered from this contract to the sender account. ",
					"params": {
						"amount": "token amount to be unstaked (in wei)."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"MAX_BPS()": {
					"notice": "Basis points representation of 100 percent."
				},
				"PROTOCOL_FEE()": {
					"notice": "Basis points (bps) representation of the protocol fee (i.e. 10 percent). Calls to send function charge 1000 bps of transaction cost."
				},
				"SCALING_FACTOR()": {
					"notice": "Used to minimise division remainder when earned fees are calculated."
				},
				"accAccruedFees(address)": {
					"notice": "The fee amount the account can withdraw."
				},
				"accCycleGasOwed(address)": {
					"notice": "The amount of gas an account owes towards clients."
				},
				"accCycleGasUsed(address)": {
					"notice": "The amount of gas an account has spent sending messages. Resets during a new cycle when an account performs an action that updates its stats."
				},
				"accFirstStake(address)": {
					"notice": "Cycle in which an account's stake is locked and begins generating fees."
				},
				"accRewards(address)": {
					"notice": "Current unclaimed rewards and staked amounts per account."
				},
				"accSecondStake(address)": {
					"notice": "Same as accFirstStake, but stores the second stake seperately  in case the account stakes in two consecutive active cycles."
				},
				"accStakeCycle(address,uint256)": {
					"notice": "Amount an account has staked and is locked during given cycle."
				},
				"accWithdrawableStake(address)": {
					"notice": "Stake amount an account can currently withdraw."
				},
				"clientAccruedFees(address)": {
					"notice": "The fee amount the client can withdraw."
				},
				"clientCycleGasEarned(address)": {
					"notice": "The amount of gas a client has received from owed account gas."
				},
				"clientLastFeeUpdate(address)": {
					"notice": "The last cycle in which the client had its earned fees updated."
				},
				"clientLastRewardUpdate(address)": {
					"notice": "The last cycle in which the client had its reward updated."
				},
				"clientRewards(address)": {
					"notice": "Current unclaimed rewards per client."
				},
				"currentCycle()": {
					"notice": "Index (0-based) of the current cycle.  Updated upon cycle setup that is triggered by contract interraction  (account sends message, claims fees, claims rewards, stakes or unstakes)."
				},
				"currentCycleReward()": {
					"notice": "Reward token amount allocated for the current cycle."
				},
				"currentStartedCycle()": {
					"notice": "Helper variable to store the index of the last active cycle."
				},
				"cycleAccruedFees(uint256)": {
					"notice": "The total amount of accrued fees per cycle."
				},
				"cycleFeesPerStakeSummed(uint256)": {
					"notice": "Sum of previous total cycle accrued fees divided by cycle stake."
				},
				"cycleTotalGasUsed(uint256)": {
					"notice": "The total amount of gas all accounts have spent sending messages per cycle."
				},
				"dbx()": {
					"notice": "Deb0x Reward Token contract. Initialized in constructor."
				},
				"i_initialTimestamp()": {
					"notice": "Contract creation timestamp. Initialized in constructor."
				},
				"i_periodDuration()": {
					"notice": "Length of a reward distribution cycle.  Initialized in contstructor to 1 day."
				},
				"lastActiveCycle(address)": {
					"notice": "The last cycle in which an account has sent messages."
				},
				"lastCycleReward()": {
					"notice": "Reward token amount allocated for the previous cycle."
				},
				"lastFeeUpdateCycle(address)": {
					"notice": "The last cycle in which the account had its fees updated."
				},
				"lastStartedCycle()": {
					"notice": "Helper variable to store the index of the last active cycle."
				},
				"pendingFees()": {
					"notice": "Accumulates fees while there are no tokens staked after the entire token supply has been distributed. Once tokens are staked again, these fees will be distributed in the next active cycle."
				},
				"pendingStake()": {
					"notice": "Helper variable to store pending stake amount.   "
				},
				"pendingStakeWithdrawal()": {
					"notice": "Stores the amount of stake that will be subracted from the total stake once a new cycle starts."
				},
				"previousStartedCycle()": {
					"notice": "Stores the index of the penultimate active cycle plus one."
				},
				"publicKeys(address)": {
					"notice": "Stores the public keys of accounts."
				},
				"rewardPerCycle(uint256)": {
					"notice": "Total token rewards allocated per cycle."
				},
				"sentId()": {
					"notice": "Message ID that is incremented every time a message is sent."
				},
				"summedCycleStakes(uint256)": {
					"notice": "Total unclaimed token reward and stake.   Updated when a new cycle starts and when an account claims rewards, stakes or unstakes externally owned tokens."
				}
			},
			"notice": "Main deb0x protocol contract used to send messages, store public keys, allocate token rewards, distribute native token fees, stake and unstake.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Deb0x.sol": "Deb0x"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/metatx/ERC2771Context.sol": {
			"keccak256": "0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29",
			"license": "MIT",
			"urls": [
				"bzz-raw://2998b5ee446069e5d22a9e95e23793cc7db8b371be4ef6ac1244280ae3c44654",
				"dweb:/ipfs/QmQcPBgUH6eYpa4ewTYvQS4FdJS6GcCyj9hpk6Z4P3KyHL"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935",
			"license": "MIT",
			"urls": [
				"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2",
				"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238",
			"license": "MIT",
			"urls": [
				"bzz-raw://43e46da9d9f49741ecd876a269e71bc7494058d7a8e9478429998adb5bc3eaa0",
				"dweb:/ipfs/QmUtp4cqzf22C5rJ76AabKADquGWcjsc33yjYXxXC4sDvy"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
			"keccak256": "0x07536242e24ee7067295d32c08e495a33e605f3c52f8ee4ec3bdcb7a351313d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://01f99dbf2ce567a64a03fc4d38b76d64d52bf1a2302922971446b1cf777220ec",
				"dweb:/ipfs/QmSiotbcG2KMuXfbKyKTcHu9ujBp67jmbULJyYLDpsrpC1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
				"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
				"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
				"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
			"keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
				"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
			]
		},
		"contracts/Deb0x.sol": {
			"keccak256": "0xe7c29d9e053ed86fed020e0be67712204a1dbdeac2c7a153a5eadb8e6e9a915c",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f6fc436281cc983e2756d6c2a6f5c6e60ff29d96fe0b29fc54005d2751d0d84",
				"dweb:/ipfs/QmRKwQcRLgVXGTSWn4BrVhSnPfHYH22UCrrkEKiUgeu2C5"
			]
		},
		"contracts/Deb0xERC20.sol": {
			"keccak256": "0xf59e2f1f6f4362550895d41a99108f6e72b004ce5ace908aabe6a68190b5eb67",
			"license": "MIT",
			"urls": [
				"bzz-raw://357e0e1d50717960c918b9a001bac93b3fe7013ab848d72dcd5d6ac2ae9b270d",
				"dweb:/ipfs/QmZzxsWuh598YEiPAjwm4fexfZNrB7KvNEys2ZSTkXwi2s"
			]
		}
	},
	"version": 1
}