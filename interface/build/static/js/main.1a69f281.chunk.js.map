{"version":3,"sources":["photos/icons/avatars/animal-44.svg","photos/icons/avatars/animal-45.svg","photos/icons/avatars/animal-46.svg","photos/icons/avatars/animal-47.svg","photos/icons/avatars/animal-48.svg","photos/icons/avatars/animal-49.svg","photos/icons/avatars/animal-5.svg","photos/icons/avatars/animal-50.svg","photos/icons/avatars/animal-6.svg","photos/icons/avatars/animal-7.svg","photos/icons/avatars/animal-8.svg","photos/icons/avatars/animal-9.svg","connectors.ts","hooks.ts","photos/icons/ios-compose.svg","photos/icons/trophy.svg","ethereum/deb0xerc20.js","components/Contexts/ContactsContext.tsx","components/ContactsSetter.tsx","components/App/PermanentDrawer.tsx","components/Common/ScreenSize.tsx","components/App/Stepper.tsx","components/Common/AccountName.tsx","components/Contexts/ReadedMessagesContext.tsx","components/Contexts/ReadedMessagesProvider.tsx","components/App/Decrypt.tsx","photos/icons/token.svg","photos/icons/coin-bag-solid--light.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/trophyRewards.svg","components/App/Stake.tsx","components/App/Sent.tsx","components/Contexts/ThemeContext.tsx","components/Contexts/ThemeProvider.tsx","components/Contexts/ContactsProvider.tsx","photos/icons/elephant.svg","photos/icons/logo-green.svg","components/App/Spinner.tsx","components/ThemeSetter.tsx","components/App/AppBar.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/App/Snackbar.tsx","components/App/Encrypt.tsx","photos/icons/clouds/cloud-2.svg","photos/icons/clouds/cloud-1.svg","photos/icons/clouds/cloud-3.svg","photos/icons/airplane-black.svg","photos/icons/avatars sync /^/.//animal/-.*/.svg$","ethereum/deb0x.js","photos/icons/avatars/animal-1.svg","photos/icons/avatars/animal-10.svg","photos/icons/avatars/animal-11.svg","photos/icons/avatars/animal-12.svg","photos/icons/avatars/animal-13.svg","photos/icons/avatars/animal-14.svg","photos/icons/avatars/animal-15.svg","photos/icons/avatars/animal-16.svg","photos/icons/avatars/animal-17.svg","photos/icons/avatars/animal-18.svg","photos/icons/avatars/animal-19.svg","photos/icons/avatars/animal-2.svg","photos/icons/avatars/animal-20.svg","photos/icons/avatars/animal-21.svg","photos/icons/avatars/animal-22.svg","photos/icons/avatars/animal-23.svg","photos/icons/avatars/animal-24.svg","photos/icons/avatars/animal-25.svg","photos/icons/avatars/animal-26.svg","photos/icons/avatars/animal-27.svg","photos/icons/avatars/animal-28.svg","photos/icons/avatars/animal-29.svg","photos/icons/avatars/animal-3.svg","photos/icons/avatars/animal-30.svg","photos/icons/avatars/animal-31.svg","photos/icons/avatars/animal-32.svg","photos/icons/avatars/animal-33.svg","photos/icons/avatars/animal-34.svg","photos/icons/avatars/animal-35.svg","photos/icons/avatars/animal-36.svg","photos/icons/avatars/animal-37.svg","photos/icons/avatars/animal-38.svg","photos/icons/avatars/animal-39.svg","photos/icons/avatars/animal-4.svg","photos/icons/avatars/animal-40.svg","photos/icons/avatars/animal-41.svg","photos/icons/avatars/animal-42.svg","photos/icons/avatars/animal-43.svg"],"names":["injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useEagerConnect","useWeb3React","activate","active","useState","tried","setTried","useEffect","isAuthorized","then","undefined","catch","abi","require","signerOrProvider","address","ethers","Contract","initialContacts","contacts","name","setContacts","_values","ContactsContext","createContext","ContactsSetter","props","useContext","setName","setAddress","ref","useRef","onClickOutside","localStorage","getItem","theme","setTheme","setItem","JSON","stringify","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","Modal","open","show","Box","className","placeholder","onChange","e","currentTarget","value","readOnly","console","log","type","onClick","push","ConnectorNames","deb0xERC20Address","Injected","PermanentDrawer","context","connector","library","account","chainId","deactivate","error","activatingConnector","setActivatingConnector","selectedIndex","setSelectedIndex","setEnsName","userUnstakedAmount","setUserUnstakedAmount","anchorEl","dimensions","Boolean","width","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","ScreenSize","notificationState","setNotificationState","setNetworkName","setShow","setUnstakedAmount","a","deb0xERC20Contract","Deb0xERC20","balanceOf","balance","utils","formatEther","lookupAddress","handleChange","text","index","removeItem","checkENS","forEach","providers","getNetwork","setTimeout","Snackbar","state","sx","display","Drawer","variant","anchor","List","map","ListItem","button","selected","ListItemIcon","src","add","trophy","ListItemText","primary","contact","IconButton","size","navigator","clipboard","writeText","message","severity","fontSize","Add","href","deb0xAddress","steps","HorizontalLinearStepper","encryptionKey","setEncryptionKey","activeStep","setActiveStep","whichStepFailed","setStepFailed","loading","setLoading","handleNext","prevActiveStep","provider","request","method","params","result","getSigner","signer","deb0xContract","Deb0x","setKey","wait","onDeboxInitialization","maxWidth","Stepper","label","labelProps","optional","Typography","color","Step","StepLabel","flexDirection","pt","LoadingButton","marginLeft","length","formatAccountName","substring","readedMessages","readed","parse","setReaded","ReadedMessagesContext","ReadedMessagesProvider","children","Provider","Decrypt","encryptionKeyInitialized","setEncryptionKeyInitialized","savedContacts","getPublicEncryptionKey","getKey","key","decrypt","encryptedMessage","decryptedMessage","fetchMessage","axios","get","Message","encryptMessage","fetchedMessage","data","setMessage","ensName","timestamp","messageTime","isDecrypted","setIsDecrypted","Math","floor","random","randomImage","isReaded","setIsReaded","checkMessageInLocalStorage","element","sender","setPreviousIndex","hideMessage","checkSenderInLocalStorage","user","previousIndex","disablePadding","secondaryAction","edge","ListItemButton","decryptMessage","includes","default","alt","filter","filteredPerson","dangerouslySetInnerHTML","__html","Announcement","Encrypt","GetMessages","fetchedMessages","setFetchedMessages","fetchMessageSenders","senderAddresses","cidsPromises","fetchMessages","cids","Promise","all","encryptedMessagesPromisesArray","cidArray","encryptedMessagesPromises","cid","unixTimestamp","blockTimestamp","toString","dateObject","Date","humanDateFormat","toLocaleString","promise","encryptedMessages","flat","processMessages","CircularProgress","Pagination","count","i","Stake","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","earnedNative","unclaimedRewards","parseFloat","balanceERC20","totalSupply","feeShare","round","toFixed","getRewardNative","rewardsAccrued","Card","CardContent","component","trophyRewards","CardActions","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","allowance","approve","parseEther","unStakeERC20","stakeERC20","setStakedAmount","totalAmountStaked","setApproval","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Divider","Grid","container","spacing","item","TextField","id","Button","disabled","TotalStaked","token","Sent","recipients","setRecipients","onlyUnique","self","indexOf","recipientsTemp","recipient","recipientsFiltered","handleDecryptMessage","fetchSentMessages","sentMessages","sentMessagesRetrieved","contentData","fetchedMessageContent","messages","cloud2","cloud1","cloud3","initialThemeState","_value","ThemeContext","ThemeProvider","savedThemeLocal","ContactsProvider","Spinner","rest","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","from","to","dur","repeatCount","ThemeSetter","checked","setChecked","Switch","connectorsByName","AppBarComponent","networkName","setAnchorEl","handleClick","currentConnector","activating","connected","toLowerCase","Popper","create","host","port","protocol","Network","getLibrary","Web3Provider","pollingInterval","App","errorMsg","selectedOption","setSelectedOption","isVisible","setIsVisible","triedEager","ethereum","displayErrorMsg","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","symbol","decimals","suppress","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","switchNetwork","err","style","alignItems","marginTop","marginBottom","newValue","textAlign","mt","elephant","logoGreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","Alert","forwardRef","elevation","SnackbarNotification","setState","handleClose","reason","autoHideDuration","onClose","ethUtil","projectIdAndSecret","client","headers","authorization","Buffer","replyAddress","textToEncrypt","setTextToEncrypt","senderAddress","setSenderAddress","messageSessionSentCounter","setMessageSessionSentCounter","estimatedReward","addressList","setAddressList","setError","input","isInList","encryptText","messageToEncrypt","destinationAddresses","getAddress","destinationAddressEncryptionKey","bufferToHex","encrypt","publicKey","version","path","overrides","parseUnits","send","tx","setEditorState","EditorState","createEmpty","match","editorState","sendContent","draftToHtml","convertToRaw","getCurrentContent","noValidate","autoComplete","onPaste","evt","preventDefault","addresses","clipboardData","getData","toBeAdded","onKeyDown","trim","isAddress","isValid","direction","margin","onDelete","deleteIcon","onEditorStateChange","toolbarClassName","wrapperClassName","editorClassName","justifyContent","mr","endIcon","airplaneBlack","loadingPosition","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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e,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,sC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,sC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,sC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,uC,iCCAzC,OAAe,cAA0B,wC","file":"static/js/main.1a69f281.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/animal-44.b84c6b0e.svg\";","export default __webpack_public_path__ + \"static/media/animal-45.b167c63d.svg\";","export default __webpack_public_path__ + \"static/media/animal-46.42d27fee.svg\";","export default __webpack_public_path__ + \"static/media/animal-47.b5150579.svg\";","export default __webpack_public_path__ + \"static/media/animal-48.e200a64c.svg\";","export default __webpack_public_path__ + \"static/media/animal-49.b1bca8d7.svg\";","export default __webpack_public_path__ + \"static/media/animal-5.05a5a1db.svg\";","export default __webpack_public_path__ + \"static/media/animal-50.eb779e9c.svg\";","export default __webpack_public_path__ + \"static/media/animal-6.85ab4489.svg\";","export default __webpack_public_path__ + \"static/media/animal-7.43eccf57.svg\";","export default __webpack_public_path__ + \"static/media/animal-8.ca62010f.svg\";","export default __webpack_public_path__ + \"static/media/animal-9.cfc3406b.svg\";","\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    4: 'https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [4] })\n\nexport const network = new NetworkConnector({\n    urls: { 4: RPC_URLS[4] },\n    defaultChainId: 4\n  })","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","export default __webpack_public_path__ + \"static/media/ios-compose.9c72b916.svg\";","export default __webpack_public_path__ + \"static/media/trophy.2c553cfd.svg\";","import { ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0xERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { createContext } from \"react\";\n\nexport const initialContacts = {\n    contacts: [{\n        name: \"Alex Males\",\n        address: \"0x31dcF3b5F43e7017425E25E5A0F006B6f065c349\"\n    }],\n    setContacts: (_values: any) => {}\n}\n\nconst ContactsContext = createContext(initialContacts);\nexport default ContactsContext;\n","import { Add, SettingsPhoneTwoTone } from \"@mui/icons-material\";\nimport { Box, IconButton, Modal } from \"@mui/material\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\n\nimport ContactsContext from \"./Contexts/ContactsContext\";\n\nexport default function ContactsSetter(props: any) {\n    const useContacts = () => useContext(ContactsContext);\n    const { contacts, setContacts } = useContacts()!;\n    const [name, setName] = useState<string>(\"\");\n    const [address, setAddress] = useState<string>(props.props);\n    const ref = useRef<any>(null);\n    const { onClickOutside } = props;\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n\n    const addContact = () => {\n        contacts.push({name: name, address: address})\n        setContacts([...contacts])\n        onClickOutside && onClickOutside();\n    }\n\n    function handleOnCancel() {\n        onClickOutside && onClickOutside();\n    }\n\n    function handleChange(event: any) {\n        console.log(event)\n        if(event.target)\n            setAddress(event.target.value)\n    }\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    });\n\n    useEffect(() => {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts, localStorage]);\n\n    useEffect(() => {\n        const handleClickOutside = (event: any) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                onClickOutside && onClickOutside();\n            }\n        };\n        document.addEventListener('click', handleClickOutside, true);\n        return () => {\n            document.removeEventListener('click', handleClickOutside, true);\n        };\n    }, [ onClickOutside ]);\n\n    return (\n        <>\n            <Modal open={props.show}>\n                <Box ref={ref} className={`modal-box ${theme === \"classic\" ? \"classic\" : \"dark\"}` }>\n                    <form>\n                        <div className=\"add-contact-text\">Add Contact</div>\n                        <div className=\"form-group for-field\">\n                            <label className=\"for-label\">Name</label>\n                            <input key=\"name\" className=\"form-control inputs\" placeholder=\"Type here\"\n                                onChange={(e) => setName(e.currentTarget.value)}/>\n                        </div>\n                        <div className=\"form-group for-field\">\n                            <label className=\"for-label\">Address</label>\n                            { address ?\n                                <input readOnly key=\"address\" className=\"form-control inputs\"\n                                    value={address}/> :\n                                <input key=\"address\" className=\"form-control inputs\" placeholder=\"Type here\" onChange={handleChange} />    \n                            }\n                        </div>\n                        <div className=\"buttons-container\">\n                            <button className=\"btn mt-3 cancel-button\" type=\"button\"\n                                onClick={() => handleOnCancel()}>\n                                Cancel\n                            </button>\n                            <button className=\"btn mt-3 add-button\" type=\"button\"\n                                onClick={addContact}>\n                                OK / SAVE / ADD\n                            </button>\n                        </div>\n                    </form>\n                </Box>\n            </Modal>\n        </>\n    );\n}","import React, { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\nimport SendIcon from '@mui/icons-material/Send';\nimport add from '../../photos/icons/ios-compose.svg';\nimport trophy from '../../photos/icons/trophy.svg';\nimport Button from '@mui/material/Button'\nimport Popper from '@mui/material/Popper'\nimport { injected } from '../../connectors';\nimport { Spinner } from './Spinner'\nimport { useEagerConnect } from '../../hooks';\nimport IconButton from \"@mui/material/IconButton\";\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ThemeSetter from '../ThemeSetter';\nimport ScreenSize from '../Common/ScreenSize';\nimport ContactsContext from '../Contexts/ContactsContext';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport SnackbarNotification from './Snackbar';\nimport { Add } from '@mui/icons-material';\nimport ContactsSetter from '../ContactsSetter';\n\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector, library, chainId, account, activate, deactivate, active, error } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const triedEager = useEagerConnect()\n    const [selectedIndex, setSelectedIndex] = useState<any>(1);\n    const [searchBarValue, setSearchBarValue] = useState<any>(\"search\");\n    const [ensName, setEnsName] = useState<any>(\"\");\n    // const [balance, setBalance] = useState<any>(\"8.13\");\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const menuItems = ['Compose', 'Deb0x', 'Stake', 'Sent'];\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popper' : undefined;\n    const dimensions = ScreenSize();\n    const useContacts = () => useContext(ContactsContext);\n    const { contacts, setContacts } = useContacts()!;\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMessage;\n    let [show, setShow] = useState(false);\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        if(account){\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n    }\n\n    async function checkENS(){\n \n        var name = await library.lookupAddress(account);\n        if(name !== null)\n        {   \n            setEnsName(name);\n        }\n    }\n\n    useEffect(() => {\n        setUnstakedAmount();\n    },[userUnstakedAmount])\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    function handleChange(text: any, index: any) {\n        setSelectedIndex(index)\n        props.onChange(text)\n        if(index !== 0)\n            localStorage.removeItem('input')\n    }\n\n    const [display, setDisplay] = useState();\n\n    function getErrorMessage(error: string) {\n        errorMessage = error;\n        return errorMessage;\n    }\n\n    useEffect(() => {\n        setTimeout(() => {setNotificationState({})}, 2000)\n    }, [notificationState])\n\n    return (\n        <>\n            {/* <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                {!!errorMessage && \n                    <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                        {getErrorMessage(errorMessage)}\n                    </p>\n                }\n            </div> */}\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                <Drawer variant=\"permanent\"\n                    anchor={dimensions.width > 768 ? 'left' : 'bottom'}\n                    className=\"side-menu\">\n                    <div className=\"image-container\">\n                        <div className=\"img\"></div>\n                    </div>\n                    { account  && \n                        <List className=\"menu-list\">\n                            {menuItems.map((text, index) => (\n                                <>\n                                    <ListItem button key={text} \n                                        selected={selectedIndex === index} \n                                        onClick={() => handleChange(text, index)}\n                                        className={`list-item ${index === 0 ? \"send-item\" : \"\"}` }>\n                                        \n                                        <ListItemIcon className=\"icon\" >\n                                            {index === 0 && <img src={add} />}\n                                            {index === 1 && <InboxIcon />} \n                                            {index === 2 && <img src={trophy} />}\n                                            {index === 3 && <SendIcon className=\"sent-icon-color\"/>}\n                                        </ListItemIcon>\n                                        <ListItemText className=\"text\" primary={text} />\n                                    </ListItem>\n                                </>\n                            ))}\n                        </List>\n                    }\n                    \n                    <div className=\"side-menu--bottom\">\n                        <>\n                            { account && \n                                <div className=\"contacts\">\n                                    <List>\n                                        {\n                                            contacts.map((contact: any, index: any) => (\n                                                    <>\n                                                    <ListItem button key={contact.name}>\n                                                        <ListItemText className=\"text\" primary={contact.name}/>\n                                                        <div className=\"col-4 buttons\">\n                                                                <IconButton size=\"small\"\n                                                                    onClick={() => {\n                                                                            navigator.clipboard.writeText(contact.address);\n                                                                            setNotificationState({\n                                                                                message: \"Address added to clipboard.\",\n                                                                                open: true,\n                                                                                severity: \"success\"\n                                                                            })\n                                                                        }}>\n                                                                    <ContentCopyIcon className=\"copy-icon\" fontSize=\"small\"/>\n                                                                </IconButton>\n                                                                <IconButton size=\"small\"\n                                                                    onClick={() => {\n                                                                        // setNotificationState({})\n                                                                        localStorage.setItem(\"input\", JSON.stringify(contact.address))\n                                                                        handleChange(\"Compose\", 0)\n                                                                    }}>\n                                                                    <SendIcon className=\"send-icon\" fontSize=\"small\"/>\n                                                                </IconButton>\n                                                            </div>\n                                                    </ListItem>\n                                                    </>\n                                            ))\n                                        }\n                                    </List>\n                                    <>\n                                        <IconButton className='add-new-all' onClick={() => setShow(true)}>\n                                            <Add className=\"add-button\"/>\n                                            <p className='add-new mb-0'>Add new</p>\n                                        </IconButton>\n                                        {show ? \n                                            <ContactsSetter show={show} onClickOutside={() => setShow(false)}/> : \n                                            <></>\n                                        }    \n                                    </>\n                                </div>\n                            }\n                            <div className=\"content\">\n                                <a href=\"https://github.com/deb0x\" target=\"_blank\" className='logo-text-color'>\n                                <GitHubIcon  />\n                                </a>\n                                <a href=\"https://www.deb0x.org\" target=\"_blank\" className='logo-text-color'>\n                                    www.deb0x.org\n                                </a>\n                            </div>\n                        </>\n                    </div>\n                </Drawer>\n            </Box>\n        </>\n    );\n}","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import {useState, Fragment} from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Typography from '@mui/material/Typography';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport SnackbarNotification from './Snackbar';\nimport '../../componentsStyling/stepper.scss';\nconst deb0xAddress = \"0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\";\nconst steps = ['Provide public encryption key', 'Initialize Deb0x'];\n\nexport default function HorizontalLinearStepper(props: any) {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setEncryptionKey] = useState('')\n    const [activeStep, setActiveStep] = useState(0);\n    const [whichStepFailed, setStepFailed] = useState<number | undefined>(undefined)\n    const [loading, setLoading] = useState(false)\n    const [notificationState, setNotificationState] = useState({})\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    async function getEncryptionKey() {\n        setLoading(true)\n\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                console.log(result)\n                setEncryptionKey(result);\n                handleNext()\n                setStepFailed(undefined)\n                setLoading(false)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"You rejected to provide the public encryption key.\", open: true,\n                severity:\"info\"})\n                setStepFailed(0)\n                setLoading(false)\n            });\n        \n    }\n\n    async function initializeDeb0x() {\n        setLoading(true)\n\n        const signer = await library.getSigner(0)\n\n        const deb0xContract = Deb0x(signer, deb0xAddress)\n\n        try {\n            const tx = await deb0xContract.setKey(encryptionKey)\n\n            tx.wait()\n            .then((result: any) => {\n                setNotificationState({message: \"Deb0x was succesfully initialized.\", open: true,\n                severity:\"success\"})\n                setLoading(false)\n                props.onDeboxInitialization(true)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"Deb0x couldn't be initialized!\", open: true,\n                severity:\"error\"})\n                setLoading(false)\n            })\n        } catch(error: any) {\n            setNotificationState({message: \"You rejected the transaction. Deb0x was not initialized.\", open: true,\n                severity:\"info\"})\n                setLoading(false)\n        }\n\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState}/>\n            <Box className=\"stepper-box\" sx={{ width: '100%', maxWidth: 1080 }}>\n                <Stepper activeStep={activeStep} className=\"stepper\">\n                    {steps.map((label, index) => {\n                        const stepProps: { completed?: boolean } = {};\n                        const labelProps: {\n                            optional?: React.ReactNode;\n                            error?: boolean;\n                        } = {};\n                        if (whichStepFailed === index) {\n                            labelProps.optional = (\n                            <Typography variant=\"caption\" color=\"error\">\n                                {(activeStep === 0) ? \"User didn't provide encryption key\" : \"User rejected transaction\"}\n                            </Typography>\n                            );\n                            labelProps.error = true;\n                        }\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps} >{label} </StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                {<Fragment>\n                    <Box className=\"button-box\" sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <LoadingButton className=\"init-btn\" loading={loading} sx={{ marginLeft: 5 }} variant=\"contained\" onClick={\n                            (activeStep === 0) ? getEncryptionKey : initializeDeb0x\n                        }>\n                            {activeStep === steps.length - 1 ? 'Initialize' : 'Provide'}\n                        </LoadingButton>\n                    </Box>\n                </Fragment>\n                }\n            </Box>\n        </>\n    );\n}\n","export default function formatAccountName(account: string)\n{\n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import { createContext } from \"react\";\n\ntype ReadedMessages = {\n    readed: string[],\n    setReaded: (_values: any) => void\n}\n\nexport const readedMessages: ReadedMessages = {\n    readed: JSON.parse(localStorage.getItem('messages') || '[]'),\n    setReaded: (_values: any) => {}\n};\n\nconst ReadedMessagesContext = createContext(readedMessages);\nexport default ReadedMessagesContext;","import { useState, useEffect } from \"react\";\nimport ReadedMessagesContext, { readedMessages } from './ReadedMessagesContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ReadedMessagesProvider = ( { children }: Props ) => {\n    const [readed, setReaded] = useState<any>(readedMessages.readed);\n  \n    const localStorage = window.localStorage;  \n  \n    useEffect(() => {\n        localStorage.setItem('messages', JSON.stringify(readed));\n    }, [readed, localStorage]);\n    \n    return (\n      <ReadedMessagesContext.Provider value={{ readed, setReaded }}>\n        <>{children}</>\n      </ReadedMessagesContext.Provider>\n    );\n  };\n  \n  export default ReadedMessagesProvider;","import { useState, useEffect, useContext, createContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport { ethers } from \"ethers\";\nimport {\n    Tooltip, List, ListItem, ListItemText, ListItemButton, Typography, Box, \n    CircularProgress,\n    Button,\n    Modal\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport axios from 'axios';\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/decrypt.scss\"\nimport { Add } from '@mui/icons-material';\nimport { Announcement } from '@mui/icons-material';\nimport ContactsSetter from '../ContactsSetter';\nimport lock from '../../photos/lock.svg';\nimport airplane from '../../photos/airplane.svg';\nimport users from '../../photos/users.svg';\nimport hand from '../../photos/hand.svg';\nimport avatar from '../../photos/icons/avatars/test-avatar-1.svg';\nimport ReadedMessagesContext from '../Contexts/ReadedMessagesContext';\nimport ReadedMessagesProvider from '../Contexts/ReadedMessagesProvider';\nimport { Encrypt } from './Encrypt';\n\nconst deb0xAddress = \"0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\";\n\nexport function Decrypt(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = \n        useState<boolean|undefined>(undefined);\n    const [decrypted, setDecrypted] = useState<any>();\n    const savedContacts = JSON.parse(localStorage.getItem('contacts') || 'null'); \n\n\n    useEffect(() => {\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://deb0x-test.infura-ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] =\n            useState(props.message.fetchedMessage.data)\n        const [ensName,setEnsName] = useState(\"\");\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime, setMessageTime] = useState(props.message.timestamp)\n        const [isDecrypted, setIsDecrypted] = useState(false);\n        const min = 1;\n        const max = 50;\n        const [randomImage] = useState<number>(Math.floor(Math.random() * (max - min + 1)) + min);\n        let [show, setShow] = useState(false);\n        const [isReaded, setIsReaded] = useState(false);\n        \n        const useMessages = () => useContext(ReadedMessagesContext)\n        const {readed, setReaded} = useMessages()!;\n\n        useEffect(()=>{\n            checkENS();\n        },[])\n\n        const addMessage = () => {\n            let messageList = JSON.parse(localStorage.getItem('messages') || 'null');\n            if(!messageList.includes(message)) {\n                readed.push(message);\n                setReaded([...readed]);\n            }\n        }\n\n        useEffect(() => {\n            localStorage.setItem('messages', JSON.stringify(readed));\n            checkMessageInLocalStorage();\n        })\n\n        const checkMessageInLocalStorage = () => {\n            let messageList = JSON.parse(localStorage.getItem('messages') || 'null');\n            messageList.map((element: any) => {\n                if (element === message)\n                    setIsReaded(true);\n            })\n        }\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n\n        async function checkENS() {\n            let name = await library.lookupAddress(props.message.sender);\n            if(name !== null) {   \n                setEnsName(name);\n            }\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            \n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n\n            checkMessageInLocalStorage();\n        }\n\n        async function hideMessage() {\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n        function checkSenderInLocalStorage(sender: any) {\n            let user: any;\n\n            if (ensName !== \"\") {\n                user = ensName;\n            } else {\n                savedContacts.map((contact: any) => {\n                    if (sender == contact.address) {\n                        user = true;\n                    }\n                })\n            }\n\n           return user;\n        }\n\n\n        return (\n            <ReadedMessagesProvider>\n                <ListItem\n                    disablePadding \n                    key={props.index}    \n                    secondaryAction={ \n                        <IconButton className={`${\n                                (message !== props.message.fetchedMessage.data) ? \n                                \"list-item-btn\" : \"\"}`\n                            }  \n                            onClick={()=>{hideMessage()}}  \n                            edge=\"end\" \n                            aria-label=\"comments\">\n                            { (message !== props.message.fetchedMessage.data) ? \n                                <VisibilityOffIcon className='visibility-icon' /> : null\n                            }\n                        </IconButton>  \n                    }\n                    className={`messages-list-item card ${isReaded ? \"read\" : \"unread\"}` }>\n                    <ListItemButton \n                        className={`list-item-button ${isDecrypted ? \"active\" : \"\"}` }\n                        onClick={() => {\n                            if(message === props.message.fetchedMessage.data) {\n                                decryptMessage()\n                            }\n                            addMessage();\n\n                        }}>\n                        <div>\n                            <img width=\"58px\" height=\"58px\" src={require(`../../photos/icons/avatars/animal-${randomImage}.svg`).default} alt=\"avatar\"/>\n                        </div>\n                        <ListItemText primary={\n                            <>\n                                <div className=\"message-left\">\n                                    <div className=\"message-heading\">\n                                        <p>From: \n                                            {\n                                                checkSenderInLocalStorage(props.message.sender) ?\n                                                savedContacts.filter((contact: any) => props.message.sender == contact.address)\n                                                    .map((filteredPerson: any) => (\n                                                        filteredPerson.name\n                                                    )) :\n                                                    formatAccountName(\n                                                        props.message.sender\n                                                    )\n                                            }\n                                        </p>\n                                        <p className=\"time-stamp\">\n                                            {messageTime}\n                                        </p>\n                                    </div>\n                                    <div className=\"message-container\">\n                                        <p className=\"message message-overflow\"\n                                            dangerouslySetInnerHTML={{ __html: message }} />\n                                        <Announcement className=\"new-message-icon\" />\n                                    </div>\n                                </div>\n                                \n                            </> \n                        }/>\n                    </ListItemButton>\n                    {isDecrypted ? \n                        <div className=\"message-right\">\n                            <div className=\"message-right--container\">\n                                <div className=\"message-heading\">\n                                    <div className=\"address\">\n                                        <p>From: \n                                            <strong>\n                                            {\n                                                checkSenderInLocalStorage(props.message.sender) ?\n                                                    savedContacts.filter((contact: any) => props.message.sender == contact.address)\n                                                        .map((filteredPerson: any) => (\n                                                            filteredPerson.name\n                                                        )) :\n                                                        formatAccountName(\n                                                            props.message.sender\n                                                        )\n                                            }\n                                            </strong>\n                                        </p>\n                                        <>\n                                            {!checkSenderInLocalStorage(props.message.sender) ? \n                                                <IconButton onClick={() => setShow(true)}>\n                                                    <Add />\n                                                </IconButton> :\n                                                <></>\n                                            }\n                                            \n                                            <ContactsSetter show={show} props={props.message.sender} \n                                                onClickOutside={() => setShow(false)}/>\n                                        </>\n                                    </div>\n                                    <p className=\"time-stamp\">\n                                        <small>\n                                            {messageTime}\n                                        </small>\n                                    </p>\n                                </div>\n                                <p className=\"message\" \n                                    dangerouslySetInnerHTML={{ __html: message }} />\n                                <Encrypt props={props.message.sender}/>\n                            </div>\n                        </div> : \n                        <></> \n                    }\n                </ListItem>\n            </ReadedMessagesProvider>\n        )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([])\n        const [previousIndex, setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            const senderAddresses = \n                await deb0xContract.fetchMessageSenders(account)\n            const cidsPromises = \n                senderAddresses.map(async function(sender:any) {\n                    return { \n                        cids: await deb0xContract.fetchMessages(account, sender),\n                        sender: sender\n                    }\n                })\n\n            const cids = await Promise.all(cidsPromises)\n\n            const encryptedMessagesPromisesArray = \n                cids.map(async function(cidArray: any) {\n                    const encryptedMessagesPromises = \n                        cidArray.cids.map(async function (cid: any) {\n                            const unixTimestamp = cid.blockTimestamp.toString()\n\n                            const milliseconds = unixTimestamp * 1000 \n\n                            const dateObject = new Date(milliseconds)\n\n                            const humanDateFormat = dateObject.toLocaleString()\n                            return { \n                                fetchedMessage: await fetchMessage(cid.cid),\n                                sender: cidArray.sender,\n                                timestamp: humanDateFormat\n                            }\n                        })\n                    const promise = await Promise.all(encryptedMessagesPromises)\n\n                    return promise\n                })\n\n            const encryptedMessages = \n                await Promise.all(encryptedMessagesPromisesArray)\n            \n            setFetchedMessages(encryptedMessages.flat())\n            setLoading(false)\n\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length === 0) {\n                return (\n                    <div className='clouds'>\n                        <div className=\"cloudOne\">\n                            <img src={require(`../../photos/icons/clouds/cloud-2.svg`).default} alt=\"cloud-1\" />\n                        </div>\n                        <div className=\"cloudTwo\">\n                            <img src={require(`../../photos/icons/clouds/cloud-1.svg`).default} alt=\"cloud-2\" />\n                        </div>\n                        <div className=\"cloudThree\">\n                            <img src={require(`../../photos/icons/clouds/cloud-3.svg`).default} alt=\"cloud-3\" />\n                        </div>\n                        <div className=\"cloudText\">\n                            Cloudy with a chance of messages\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"row messages-list\">\n                        <List className=\"col-md-4 col-sm-12\">\n                            <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                                <Pagination count={1} />\n                                <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                                    <RefreshIcon fontSize=\"large\"/>\n                                </IconButton>\n                            </Box>\n                            {fetchedMessages.map((message: any, i: any) => {\n                                return (\n                                    <Message message={message} index={i} \n                                        key={i} previousIndex={previousIndex} \n                                        setPreviousIndex={setPreviousIndex} />\n                                )\n                            })}\n                        </List>\n                        <Box className=\"corner-image col-md-8\">\n                            <div>\n                                \n                            </div>\n                        </Box>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n    }\n    \n    if (encryptionKeyInitialized === true) {\n        return (\n            <div className=\"content-box\">\n                <GetMessages />\n            </div>\n        )\n    } else if (encryptionKeyInitialized === false) {\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else {\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/trophyRewards.b26a8588.svg\";","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, TextField, Divider,Box\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport trophyRewards from \"../../photos/icons/trophyRewards.svg\";\n\nconst deb0xAddress = \"0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\"\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\n\nexport function Stake(props: any): any {\n\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n\n    function RewardsPanel() {\n        \n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            console.log(\"rewards effect\")\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            console.log(\"fee share effect\")\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const unclaimedRewards = await deb0xContract.earnedNative(account);\n\n            setRewardsUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function feeShare() {\n            console.log(\"aicii\")\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n            console.log(\"1\")\n            \n            let balance = parseFloat((ethers.utils.formatEther((await deb0xContract.balanceERC20(account)) )) )\n            console.log(balance + \" balance\")\n            \n            let totalSupply = parseFloat((ethers.utils.formatEther((await deb0xContract.totalSupply())) ))\n            console.log(totalSupply + \" totalSupply\")\n            const feeShare = balance * 100 / totalSupply\n            console.log(feeShare + \" feeShare\")\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.getRewardNative()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\", open: true,\n                    severity: \"info\"\n                })\n            }\n\n\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-6 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            REWARDS\n                        </Typography>\n                        <Typography >\n                            Your unclaimed rewards:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"mb-3\">\n                            <strong>{rewardsUnclaimed}</strong>\n                        </Typography>\n                        <Typography>\n                            Your share from fees:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"mb-3\">\n                            <strong>{feeSharePercentage}</strong>\n                        </Typography>\n                    </div>\n                    <div className='col-12 col-md-6 d-flex justify-content-end align-items-start'>\n                        <img src={trophyRewards} alt=\"trophyRewards\" className=\"p-3\"/>\n                    </div>\n                </CardContent>\n                <CardActions className='button-container'>\n                    <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Collect</LoadingButton>\n                </CardActions>\n            </Card>\n            </>\n        )\n    }\n\n\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n        \n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n        };\n        \n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            console.log(\"stake component effect\");\n            setTheme(localStorage.getItem('globalTheme'));\n            console.log(theme);\n        });\n\n        useEffect(() => {\n            console.log(\"user staked effect\")\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        useEffect(() => {\n            console.log(\"user unstaked effect\")\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            console.log(\"approval effect\")\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const balance = await deb0xContract.balanceERC20(account)\n\n            setUserStakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const balance = await deb0xERC20Contract.balanceOf(account)\n\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const allowance = await deb0xERC20Contract.allowance(account, deb0xAddress)\n\n            allowance > 0 ? setApproved(true) : setApproved(false)\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const totalSupply = await deb0xContract.totalSupply()\n\n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xERC20Contract = await Deb0xERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"1000000\"))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.unStakeERC20(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.stakeERC20(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        return (\n            <Card variant = \"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\">Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent className=\"row pb-0\">\n                    <div className=\"col-6 p-1\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"d-flex justify-content-center p-1\">\n                            Your staked amount:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"d-flex justify-content-center p-1\">\n                            <strong>{userStakedAmount} DBX</strong>\n                        </Typography>\n                    </div>\n                    <div className=\"col-6 p-1\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"d-flex justify-content-center p-1\">\n                            Your tokens in wallet:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"d-flex justify-content-center p-1\">\n                            <strong>{userUnstakedAmount} DBX</strong>\n                        </Typography>\n                    </div>\n                    <Divider className=\"divider-pink \" />\n                    {approved && <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField id=\"outlined-basic\"\n                                label=\"Amount to stake\"\n                                variant=\"outlined\"\n                                type=\"number\"\n                                value={amountToStake}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                               onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions>\n                    {approved && <LoadingButton disabled={!amountToStake} className=\"submit-btn \" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                    {!approved && <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={approveStaking}>Approve Staking</LoadingButton>}\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent>\n                    \n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                  \n\n                    <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                label=\"Amount to unstake\"\n                                variant=\"outlined\"\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(userStakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n    \n        async function totalAmountStaked() {\n    \n            const deb0xContract = await Deb0x(library, deb0xAddress)\n    \n            const totalSupply = await deb0xContract.totalSupply()\n    \n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DBX\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"container\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-md-6 \">\n                            <TotalStaked/>                        \n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-md-6\">\n                            <StakeUnstake/>\n                            <RewardsPanel />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    List, ListItem, Chip,\n    ListItemText, ListItemButton, \n    Box, CircularProgress, Stack\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport '../../componentsStyling/decrypt.scss';\nimport formatAccountName from '../Common/AccountName';\nimport cloud1 from '../../photos/icons/clouds/cloud-1.svg';\nimport cloud2 from '../../photos/icons/clouds/cloud-2.svg';\nimport cloud3 from '../../photos/icons/clouds/cloud-3.svg';\n\nconst axios = require('axios')\nconst deb0xAddress = \"0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\"\n\nexport function Sent(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState<boolean|undefined>(undefined)\n    const [messageSent, setmessageSent] = useState(false);\n\n    useEffect(() => {\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://deb0x-test.infura-ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] = useState(props.message.fetchedMessage.data)\n        const [recipients, setRecipients] = useState<string[]>([]);\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime,setMessageTime] = useState(props.message.timestamp)\n        const [ensName,setEnsName] = useState(\"\");\n        const [isDecrypted, setIsDecrypted] = useState(false);\n        const savedContacts = JSON.parse(localStorage.getItem('contacts') || 'null'); \n        const min = 1;\n        const max = 50;\n        const [randomImage] = useState<number>(Math.floor(Math.random() * (max - min + 1)) + min);\n        \n        useEffect(()=> {\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n        function onlyUnique(value: any, index: any, self: string | any[]) {\n            return self.indexOf(value) === index;\n        }\n\n        async function checkENS() {\n            let recipientsTemp:any = []\n            const recipients = props.message.recipients.filter((recipient:any) => recipient != account);\n\n            var recipientsFiltered = recipients.filter(onlyUnique);\n\n            for(let recipient of recipientsFiltered) {\n                let name = await library.lookupAddress(recipient);\n                if(name !== null)\n                {   \n                    recipientsTemp = [...recipientsTemp, name];\n                } else {\n                    recipientsTemp = [...recipientsTemp, recipient];\n                }\n            }\n\n            setRecipients(recipientsTemp)\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage(){\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n        function checkSenderInLocalStorage(sender: any) {\n            let user: any;\n\n            if (ensName !== \"\") {\n                user = ensName;\n            } else {\n                savedContacts.map((contact: any) => {\n                    if (sender == contact.address) {\n                        user = true;\n                    }\n                })\n            }\n\n           return user;\n        }\n\n        function handleDecryptMessage() {\n            if(message === props.message.fetchedMessage.data) {\n                decryptMessage()\n            }\n        }\n    \n        return (\n            <ListItem disablePadding key={props.index}\n                secondaryAction={ \n                    <IconButton \n                        className={`${(message != props.message.fetchedMessage.data) ? \"list-item-btn\" : \"\"}`}  \n                        onClick={()=> hideMessage() }  edge=\"end\" aria-label=\"comments\">\n                        { (message != props.message.fetchedMessage.data) ? <VisibilityOffIcon  />: null}\n                    </IconButton>  \n                }\n                className=\"messages-list-item\"\n            >\n                <ListItemButton className={`list-item-button ${isDecrypted ? \"active\" : \"\"}` }\n                    onClick={() => handleDecryptMessage()}>\n                    <div>\n                        <img width=\"58px\" height=\"58px\" src={require(`../../photos/icons/avatars/animal-${randomImage}.svg`).default} alt=\"avatar\"/>\n                    </div>\n                    <ListItemText primary={\n                        <>\n                            <div className=\"message-left\">\n                                <div className=\"message-heading\">\n                                    <div className=\"d-flex align-items-center\">\n                                        <small>To: </small>\n                                        <div className=\"message-overflow\">\n                                            {\n                                                recipients.length > 0 ?\n                                                recipients.map((recipient: any) => {\n                                                    return (\n                                                        <span\n                                                            key={recipient}>\n                                                                {\n                                                                checkSenderInLocalStorage(recipient) ?\n                                                                    savedContacts.filter((contact: any) => recipient == contact.address)\n                                                                        .map((filteredPerson: any) => (\n                                                                            filteredPerson.name\n                                                                        )) :\n                                                                        formatAccountName(recipient)\n                                                                }\n                                                                {\n                                                                    recipients.length > 1 ? <>,</> : <></>\n                                                                }\n                                                        </span>\n\n                                                    )\n                                                }) :\n                                                account\n                                            }\n                                        </div>\n                                        {\n                                            recipients.length > 1 ? <span>({recipients.length})</span> : <></>\n                                        }\n                                    </div>\n                                    <p className=\"time-stamp\">\n                                        <small>\n                                            {messageTime}\n                                        </small>\n                                    </p>\n                                </div>\n                                <p className={`message message-overflow\n                                        ${message === props.message.fetchedMessage.data ? \n                                        \"message-overflow\" : \"\"}` }\n                                    dangerouslySetInnerHTML={{ __html: message }}>\n                                </p>\n                            </div>\n                        </>\n                    }/>\n                </ListItemButton>\n                {isDecrypted ? \n                    <div className=\"message-right\">\n                        <div className=\"message-right--container\">\n                            <div className=\"message-heading\">\n                                <div className=\"address\">\n                                    <p>To:\n                                        <strong>\n                                        {\n                                            recipients.map((recipient: any) => {\n                                                return (\n                                                    <span\n                                                        key={recipient}>\n                                                            {\n                                                            checkSenderInLocalStorage(recipient) ?\n                                                                savedContacts.filter((contact: any) => recipient == contact.address)\n                                                                    .map((filteredPerson: any) => (\n                                                                        filteredPerson.name\n                                                                    )) :\n                                                                    recipient\n                                                            }\n                                                    </span>\n                                                )\n                                            }) \n                                        }\n                                        </strong>\n                                    </p>\n                                </div>\n                                <p className=\"time-stamp\">\n                                    <small>\n                                        {messageTime}\n                                    </small>\n                                </p>\n                            </div>\n                            <p className={`message ${message === props.message.fetchedMessage.data ? \"message-overflow\" : \"\"}` }\n                                dangerouslySetInnerHTML={{ __html: message }}>\n                            </p>\n                        </div>\n                    </div> : \n                    <></>\n                }\n            </ListItem>\n            )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([]);\n        const [previousIndex,setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            \n            const sentMessages = await deb0xContract.fetchSentMessages(account)  \n\n            const sentMessagesRetrieved = sentMessages.map(async function (item: any) {\n                const fetchedMessageContent = await fetchMessage(item.contentData.cid)\n                const unixTimestamp = item.contentData.blockTimestamp.toString()\n\n                const milliseconds = unixTimestamp * 1000 \n\n                const dateObject = new Date(milliseconds)\n\n                const humanDateFormat = dateObject.toLocaleString()\n                return { fetchedMessage: fetchedMessageContent,\n                         recipients: item.recipients,\n                         timestamp: humanDateFormat}\n            })\n\n            const messages = await Promise.all(sentMessagesRetrieved)\n\n            setFetchedMessages(messages)\n            setLoading(false)\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length === 0) {\n                return (\n                    <>\n                        <div className='clouds'>\n                            <div className=\"cloudOne\">\n                                <img src={cloud2} alt=\"cloud-2\" />\n                            </div>\n                            <div className=\"cloudTwo\">\n                                <img src={cloud1} alt=\"cloud-1\" />\n                            </div>\n                            <div className=\"cloudThree\">\n                                <img src={cloud3} alt=\"cloud-3\" />\n                            </div>\n                            <div className=\"cloudText\">\n                                Cloudy with a chance of messages\n                            </div>\n                        </div>\n                    </>\n                )\n            } else {\n                return (\n                    <div className=\"row messages-list\">\n                        <List className=\"col-md-4 col-sm-12\">\n                            <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                                <Pagination count={1} />\n                                <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                                    <RefreshIcon fontSize=\"large\"/>\n                                </IconButton>\n                            </Box>\n                            {fetchedMessages.map((message: any, i: any) => {\n                                return (\n                                    <Message message={message} index={i} \n                                        key={i} previousIndex={previousIndex} \n                                        setPreviousIndex={setPreviousIndex} />\n                                )\n                            })}\n                        </List>\n                        <Box className=\"intro-box sent col-md-8\">\n                            <div className=\"open-message\">\n                                <p>Come on, don't be shy. Open a message</p>\n                            </div>\n                        </Box>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n\n    }\n    \n    if(encryptionKeyInitialized == true){\n        return (\n            <div className=\"content-box\">\n                <GetMessages />\n           </div>\n        )\n    } else if(encryptionKeyInitialized == false){\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else{\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"classic\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","import { useState, useEffect } from \"react\";\nimport ContactsContext, { initialContacts } from './ContactsContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ContactsProvider = ( { children }: Props ) => {\n    const [contacts, setContacts] = useState<any>(initialContacts.contacts);\n  \n    const localStorage = window.localStorage;\n  \n    useEffect(() => {\n        const savedContacts = JSON.parse(localStorage.getItem('contacts') || 'null');\n        \n        if (!!savedContacts) {\n            setContacts(savedContacts);\n        }\n    }, [localStorage]);\n  \n  \n    useEffect(() => {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts, localStorage]);\n    \n    return (\n      <ContactsContext.Provider value={{ contacts, setContacts }}>\n        <>{children}</>\n      </ContactsContext.Provider>\n    );\n  };\n  \n  export default ContactsProvider;","export default __webpack_public_path__ + \"static/media/elephant.2a77170b.svg\";","export default __webpack_public_path__ + \"static/media/logo-green.a6b7a360.svg\";","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import Switch from \"@mui/material/Switch\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport '../componentsStyling/themeSetter.scss';\n\nimport ThemeContext from \"./Contexts/ThemeContext\";\n\nexport default function ThemeSetter() {\n    const useTheme = () => useContext(ThemeContext);\n    const { theme, setTheme } = useTheme()!;\n    const [checked, setChecked] = useState<boolean>(theme === \"classic\" ? true : false);\n\n    useEffect(() => {\n        if(theme === \"classic\") {\n            setChecked(true);\n        } else {\n            setChecked(false);\n        }\n    }, [])\n\n    const handleChange = (event: any) => {\n        setChecked(event.target.checked);\n        event.target.checked ? setTheme(\"classic\") : setTheme(\"dark\")\n    };\n\n  return (\n    <Switch\n        className=\"theme-switcher\"\n        checked={checked}\n        onChange={handleChange}\n        value=\"checked\"\n    />\n  );\n}\n\nconst themeOptions = [{ value: \"classic\" }, { value: \"dark\" }];","import React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport ThemeSetter from '../ThemeSetter';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport { useEagerConnect } from '../../hooks';\nimport { id } from 'ethers/lib/utils';\nimport formatAccountName from '../Common/AccountName';\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\";\nimport Popper from '@mui/material/Popper';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport '../../componentsStyling/appBar.scss';\n\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate, active, error } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const triedEager = useEagerConnect();\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popper' : undefined;\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        if(account){\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n    }\n\n    useEffect(() => {\n        setUnstakedAmount();\n    },[userUnstakedAmount])\n\n    async function checkENS(){\n \n        var name = await library.lookupAddress(account);\n        if(name !== null)\n        {   \n            setEnsName(name);\n        }\n    }\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    function handleChange(text: any, index: any) {\n        // setSelectedIndex(index)\n        // props.onChange(text)\n        if(index !== 0)\n            localStorage.removeItem('input')\n    }\n    \n    return (\n        <>\n            <div className=\"app-bar--top\">\n                <Box className=\"main-menu--right\">\n                {account  ? \n                    <Button variant =\"contained\"\n                            onClick={() => handleChange(\"Stake\", 2)}>\n                        {userUnstakedAmount} DBX\n                    </Button> : \n                    <></> \n                }\n                \n                { (() =>  {\n                    const currentConnector = connectorsByName[ConnectorNames.Injected]\n                    const activating = currentConnector === activatingConnector\n                    const connected = currentConnector === connector\n                    const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                    return (\n                        <Button variant=\"contained\"\n                            key={ConnectorNames.Injected}\n                            aria-describedby={id}\n                            onClick={!connected ? \n                                () => {\n                                    setActivatingConnector(currentConnector)\n                                    activate(currentConnector)\n                                } : \n                                handleClick\n                            }>\n                            \n                            { activating ? \n                                <Spinner color={'black'} /> :\n                                !connected ? \n                                    \"Connect Wallet\" :\n                                    <span>\n                                        {account === undefined ? \n                                            `Unsupported Network. Switch to ${networkName}` : \n                                            account ? \n                                                ensName === \"\" ? \n                                                    `${formatAccountName(account)}` :\n                                                    `${ensName.toLowerCase()} \n                                                    (${formatAccountName(account)})`\n                                            : ''}\n                                    </span>\n                            }\n                        </Button>\n                    )\n                }) ()}\n                        \n                    <ThemeSetter />\n                </Box>\n            </div>\n            <Popper className=\"popper\" id={id} open={open} anchorEl={anchorEl}>\n                <List>\n                    \n                    <ListItem className='logout'>\n                        <Button \n                            onClick={(event: any) => {\n                                handleClick(event)\n                                deactivate()\n                            }}\n                            className=\"logout-btn\">\n                            Logout \n                        </Button>\n                    </ListItem>\n                </List>\n            </Popper>\n        </>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React,\n    UnsupportedChainIdError\n} from '@web3-react/core';\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { create } from 'ipfs-http-client'\nimport { Encrypt } from './components/App/Encrypt';\nimport { Decrypt } from './components/App/Decrypt';\nimport {Stake} from './components/App/Stake';\nimport { Sent } from './components/App/Sent';\nimport { Box,Typography, Fab, Button} from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport ContactsProvider from './components/Contexts/ContactsProvider';\nimport elephant from './photos/icons/elephant.svg';\nimport logoGreen from './photos/icons/logo-green.svg';\nimport logoDark from \"./photos/logo-dark.svg\";\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\n\nconst client = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'http'\n})\n\nconst ethUtil = require('ethereumjs-util')\n//old address: 0x218c10BAb451BE6A897db102b2f608bC7D3441a0\n// 0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\nconst deb0xAddress = \"0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\";\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getErrorMessage(error: Error) {\n    let networkName;\n\n    injected.supportedChainIds?.forEach(chainId => networkName = (ethers.providers.getNetwork(chainId)).name)\n    if (error instanceof NoEthereumProviderError) {\n        return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n    } else if (error instanceof UnsupportedChainIdError) {\n        return `You're connected to an unsupported network. Switch to ${networkName}`\n    } else if (\n        error instanceof UserRejectedRequestErrorInjected\n    ) {\n        return 'Please authorize this website to access your Ethereum account.'\n    } else {\n        console.error(error)\n        return 'An unknown error occurred. Check the console for more details.'\n    }\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, library, chainId, account, active, error, activate } = context\n\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [selectedOption, setSelectedOption] = useState('Deb0x');\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n    const [isVisible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n            setIsVisible(true);\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleChange(newValue: any) {\n        setSelectedOption(newValue)\n    }\n\n    useEffect(() => {\n        localStorage.removeItem('input');\n        setIsVisible(false);\n    }, [])\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {    \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                switchNetwork();               \n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\")\n        }, [])\n\n    async function switchNetwork() {\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x4\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x4', \n                        chainName:'Rinkeby Test Network',\n                        rpcUrls:['https://rinkeby.infura.io/v3/'],                   \n                        blockExplorerUrls:['https://rinkeby.etherscan.io'],  \n                        nativeCurrency: { \n                        symbol:'ETH',   \n                        decimals: 18\n                        }     \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n        \n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    useEffect(() => {\n        setTimeout(() => {setIsVisible(true)}, 2000)\n    }, [account])\n    \n    return (\n\n    <>\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {!!errorMsg &&\n            <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                {displayErrorMsg(errorMsg)}\n            </p>\n        }\n    </div>\n    <ThemeProvider>\n        {\n            account ? \n            <ContactsProvider>\n                <div className=\"app-container container-fluid\">\n                    <div className=\"row main-row\">\n                        <div className=\"col col-md-3 p-0 side-menu-container\">\n                            <PermanentDrawer onChange={handleChange}/>\n                        </div>\n                        <div className=\"col col-md-9\">\n                        <AppBarComponent />\n                        {account ? \n                            !!(library && account) && (\n                                <Box className=\"main-container\" sx={{marginTop: 12}}>\n                                    {selectedOption === \"Compose\" && <Encrypt />}\n                                    {selectedOption === \"Deb0x\" && <Decrypt account={account}/>}\n                                    {selectedOption === \"Stake\" && <Stake />}\n                                    {selectedOption === \"Sent\" && <Sent />}\n                                </Box>\n                            ):\n                                <Box className=\"home-page-box\">\n                                    <Typography sx={{textAlign:\"center\",color:\"gray\"}} variant=\"h1\">\n                                        The End To End Encrypted \n                                        <br></br>\n                                        Decentralized Email Protocol \n                                        <br></br> \n                                        Owned By Its Users\n                                    </Typography>\n                                    <Typography sx={{ mt:10,textAlign:\"center\"}} variant=\"h3\">\n                                        Please connect your wallet\n                                    </Typography>\n                                </Box>\n                        }\n                        </div>\n                    </div>\n                </div>\n            </ContactsProvider> :\n            <div className={`app-container p-0 ${isVisible ? \"\" : \"d-none\"}` }>\n                <div className=\"initial-page\">\n                    <div className=\"row\">\n                        <div className=\"col-md-7 img-container mr-4\">\n                            <img className=\"image--left\" src={elephant} />\n                            <div className=\"img-content\">\n                                <p>Hey, you!</p>\n                                \n                                <p>To use <img className=\"content-logo\" src={logoGreen} /> you need to have your wallet connected</p>\n                                <div>\n                                { (() =>  {\n                                    const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                    const activating = currentConnector === activatingConnector\n                                    const connected = currentConnector === connector\n                                    const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                                    return (\n                                        <Button variant=\"contained\"\n                                            key={ConnectorNames.Injected}\n                                            // aria-describedby={id}\n                                            onClick={!connected ? \n                                                () => {\n                                                    setActivatingConnector(currentConnector)\n                                                    activate(currentConnector)\n                                                } : \n                                                handleClick}\n                                                className=\"connect-button\">\n                                            \n                                            { activating ? \n                                                <Spinner color={'black'} /> :\n                                                !connected ? \n                                                    \"Connect Wallet\" :\n                                                    <span>\n                                                        {account === undefined ? \n                                                            `Unsupported Network. Switch to ${networkName}` : \n                                                            ''}\n                                                    </span>\n                                            }\n                                        </Button>\n                                    )\n                                }) ()}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-5\">\n                            <div className=\"text-container\">\n                                <img className=\"dark-logo\" src={logoGreen} />\n                                <p>\n                                    The End to End Encrypted Decentralized \n                                    Email Protocol <br />\n                                    <span className=\"text-green\">\n                                        Owned by its Users\n                                    </span>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n    </ThemeProvider>\n    </>\n  )\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { encrypt } from '@metamask/eth-sig-util'\nimport Deb0x from \"../../ethereum/deb0x\"\nimport { create } from 'ipfs-http-client'\nimport SendIcon from '@mui/icons-material/Send';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n    Box, TextField, Typography\n} from '@mui/material';\nimport { ethers } from \"ethers\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport '../../componentsStyling/encrypt.scss';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport airplaneBlack from '../../photos/icons/airplane-black.svg';\n\nconst deb0xAddress = \"0xFA6Ce4a99dB3BF9Ab080299c324fB1327dcbD7ED\";\nconst ethUtil = require('ethereumjs-util')\n\nconst projectId = \"2DQlT722j6BR4li5VlazCIT64qu\"\nconst projectSecret = \"357905940d3462525af41c42957a804c\"\nconst projectIdAndSecret = `${projectId}:${projectSecret}`\n\nconst client = create({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https',\n  headers: {\n    authorization: `Basic ${Buffer.from(projectIdAndSecret).toString(\n      'base64'\n    )}`,\n  },\n})\n\nexport function Encrypt(replyAddress: any): any {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setKey] = useState('')\n    const [textToEncrypt, setTextToEncrypt] = useState('')\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState('')\n    const [senderAddress, setSenderAddress] = useState('')\n    const [notificationState, setNotificationState] = useState({})\n    const [messageSessionSentCounter, setMessageSessionSentCounter] = useState(0)\n    const [loading, setLoading] = useState(false)\n    const [estimatedReward, setEstimatedReward] = useState(\"9.32\");\n    const [addressList, setAddressList] = useState<string[]>([])\n    const [error, setError] = useState<string | null>(null);\n    const [ input, setInput ] = useState(JSON.parse(localStorage.getItem('input') || 'null'));\n    const [address, setAddress] = useState<string>(replyAddress.props);\n\n    useEffect(() => {\n        if(input !== null && input.match(/^0x[a-fA-F0-9]{40}$/g))\n            addressList.push(input)\n        \n        if(address)\n            addressList.push(address)\n    }, []);\n\n    useEffect(() => {\n        if (!encryptionKeyInitialized) {\n            getPublicEncryptionKey()\n        }\n    }, []);\n\n    function handleKeyDown(evt: any) {\n        if ([\"Enter\", \"Tab\", \",\"].includes(evt.key)) {\n            evt.preventDefault();\n\n            var value = senderAddress.trim();\n\n            if (value && isValid(value)) {\n                setAddressList([...addressList, senderAddress])\n                setSenderAddress(\"\")\n            }\n        }\n    }\n\n    function handleChange(evt: any) {\n        setSenderAddress(evt.target.value)\n        setError(null)\n    }\n\n    function handleDelete(item: any) {\n        setAddressList(addressList.filter(i => i !== item))\n    }\n\n    function handlePaste(evt: any) {\n        evt.preventDefault()\n\n        var paste = evt.clipboardData.getData(\"text\")\n        var addresses = paste.match(/^0x[a-fA-F0-9]{40}$/g)\n\n        if (addresses) {\n            var toBeAdded = addresses.filter((address: any) => !isInList(address))\n\n            setAddressList([...addressList, ...toBeAdded])\n        }\n    }\n\n    function isValid(address: any) {\n        let error = null;\n\n        if (isInList(address)) {\n            error = `${address} has already been added.`;\n        }\n\n        if (!isAddress(address)) {\n            error = `${address} is not a valid ethereum address.`;\n        }\n\n        if (error) {\n            setNotificationState({\n                message: error, open: true,\n                severity: \"error\"\n            })\n            setError(error);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    function isInList(address: any) {\n        return addressList.includes(address);\n    }\n\n    function isAddress(address: any) {\n        return ethers.utils.isAddress(address);\n    }\n\n    async function encryptText(messageToEncrypt: any, destinationAddresses: any)\n    {\n        setLoading(true);\n        const signer = await library.getSigner(0);\n        let cids:any = []\n        let recipients = replyAddress.props ? [replyAddress.props].flat() : destinationAddresses.flat()\n        recipients.push(await signer.getAddress())\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        for (let address of recipients) {\n            console.log(recipients, address)\n            const destinationAddressEncryptionKey = await deb0xContract.getKey(address);\n            const encryptedMessage = ethUtil.bufferToHex(\n                Buffer.from(\n                    JSON.stringify(\n                        encrypt({\n                            publicKey: destinationAddressEncryptionKey,\n                            data: messageToEncrypt,\n                            version: 'x25519-xsalsa20-poly1305'\n                        }\n                        )\n                    ),\n                    'utf8'\n                )\n            )\n            const message = await client.add(encryptedMessage)\n            cids.push(message.path)\n        }\n\n        try {\n            const overrides = \n                { value: ethers.utils.parseUnits(\"0.001\", \"ether\"), }\n            const tx = await deb0xContract.send(recipients, cids, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Message was succesfully sent.\",\n                        open: true,\n                        severity: \"success\"\n                    })\n\n                    let count = messageSessionSentCounter + 1;\n                    setMessageSessionSentCounter(count);\n                    setEditorState(EditorState.createEmpty());\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Message couldn't be sent!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    console.log(error)\n                })\n        } catch (error: any) {\n            console.log(error)\n            setNotificationState({\n                message: \"You rejected the transaction. Message was not sent.\",\n                open: true,\n                severity: \"info\"\n            })\n        }\n\n        setTextToEncrypt('');\n        setSenderAddress(\"\");\n        setAddressList([]);\n        setLoading(false);\n\n    }\n\n    async function initializeDeb0x() {\n        const signer = await library.getSigner(0);\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        const tx = await deb0xContract.setKey(encryptionKey);\n        const receipt = await tx.wait();\n\n        return receipt.transactionHash;\n    }\n\n    async function getEncryptionKey() {\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setKey(result);\n            });\n    }\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        console.log(key)\n        console.log(encryptionKey)\n        setEncryptionKeyInitialized(key)\n    }\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n\n    const handleEditorChange = (state: any) => {\n        setEditorState(state);\n        sendContent();\n    };\n\n    const sendContent = () => {\n        setTextToEncrypt(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n    };\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <div className=\"form-container content-box\">\n                <Box component=\"form\"\n                    noValidate\n                    autoComplete=\"off\">\n                    {!address && \n                        <>\n                            <TextField id=\"standard-basic\"\n                                placeholder=\"Type or paste addresses and press `Enter`...\"\n                                value={senderAddress}\n                                onPaste={handlePaste}\n                                onKeyDown={handleKeyDown}\n                                onChange={handleChange} />\n                            <Stack direction=\"row\" spacing={1}>\n                                <Box sx={{ width: '100%', margin: '0 auto' }}\n                                    className=\"address-list\">\n                                    {\n                                        addressList.map((address: any) => {\n                                            return (\n                                                <Chip\n                                                    key={address}\n                                                    label={address}\n                                                    onDelete={() => handleDelete(address)}\n                                                    deleteIcon={<DeleteIcon />}\n                                                />\n                                            )\n                                        })\n                                    }\n                                </Box>\n                            </Stack>\n                        </>\n                    }\n                    \n                    <Editor\n                        editorState={editorState}\n                        onEditorStateChange={handleEditorChange}\n                        toolbarClassName=\"toolbar\"\n                        wrapperClassName=\"wrapper\"\n                        editorClassName=\"editor\"\n                    />\n                    { messageSessionSentCounter === 0 ?\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\", \n                            flexDirection: \"column\", \n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} \n                                endIcon={ loading ? \n                                    null : \n                                    <img src={airplaneBlack} className=\"send-papper-airplane\" alt=\"send-button\"></img>\n                                }\n                                loadingPosition=\"end\"\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt == '' || addressList == []}\n                                onClick={() => {\n                                    console.log(replyAddress.props)\n                                    encryptText(textToEncrypt, addressList)\n                                }\n                                    \n                                } >\n                            </LoadingButton>\n                        </Box>\n                        :\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\",\n                            flexDirection: \"column\",\n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} variant=\"contained\" \n                                endIcon={ <img src={airplaneBlack} className=\"send-papper-airplane\" alt=\"send-button\"></img> }\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                onClick={() => encryptText(textToEncrypt, senderAddress)}>\n                            </LoadingButton>\n                        </Box>\n                    }\n                </Box>\n            </div>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/cloud-2.38b567a5.svg\";","export default __webpack_public_path__ + \"static/media/cloud-1.ef57dc90.svg\";","export default __webpack_public_path__ + \"static/media/cloud-3.e5323624.svg\";","export default __webpack_public_path__ + \"static/media/airplane-black.e8545508.svg\";","var map = {\n\t\"./animal-1.svg\": 962,\n\t\"./animal-10.svg\": 963,\n\t\"./animal-11.svg\": 964,\n\t\"./animal-12.svg\": 965,\n\t\"./animal-13.svg\": 966,\n\t\"./animal-14.svg\": 967,\n\t\"./animal-15.svg\": 968,\n\t\"./animal-16.svg\": 969,\n\t\"./animal-17.svg\": 970,\n\t\"./animal-18.svg\": 971,\n\t\"./animal-19.svg\": 972,\n\t\"./animal-2.svg\": 973,\n\t\"./animal-20.svg\": 974,\n\t\"./animal-21.svg\": 975,\n\t\"./animal-22.svg\": 976,\n\t\"./animal-23.svg\": 977,\n\t\"./animal-24.svg\": 978,\n\t\"./animal-25.svg\": 979,\n\t\"./animal-26.svg\": 980,\n\t\"./animal-27.svg\": 981,\n\t\"./animal-28.svg\": 982,\n\t\"./animal-29.svg\": 983,\n\t\"./animal-3.svg\": 984,\n\t\"./animal-30.svg\": 985,\n\t\"./animal-31.svg\": 986,\n\t\"./animal-32.svg\": 987,\n\t\"./animal-33.svg\": 988,\n\t\"./animal-34.svg\": 989,\n\t\"./animal-35.svg\": 990,\n\t\"./animal-36.svg\": 991,\n\t\"./animal-37.svg\": 992,\n\t\"./animal-38.svg\": 993,\n\t\"./animal-39.svg\": 994,\n\t\"./animal-4.svg\": 995,\n\t\"./animal-40.svg\": 996,\n\t\"./animal-41.svg\": 997,\n\t\"./animal-42.svg\": 998,\n\t\"./animal-43.svg\": 999,\n\t\"./animal-44.svg\": 1000,\n\t\"./animal-45.svg\": 1001,\n\t\"./animal-46.svg\": 1002,\n\t\"./animal-47.svg\": 1003,\n\t\"./animal-48.svg\": 1004,\n\t\"./animal-49.svg\": 1005,\n\t\"./animal-5.svg\": 1006,\n\t\"./animal-50.svg\": 1007,\n\t\"./animal-6.svg\": 1008,\n\t\"./animal-7.svg\": 1009,\n\t\"./animal-8.svg\": 1010,\n\t\"./animal-9.svg\": 1011\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 434;","import { sign } from \"crypto\";\nimport { Contract, ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0x.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","export default __webpack_public_path__ + \"static/media/animal-1.ce0a7c89.svg\";","export default __webpack_public_path__ + \"static/media/animal-10.1ec63741.svg\";","export default __webpack_public_path__ + \"static/media/animal-11.60d27046.svg\";","export default __webpack_public_path__ + \"static/media/animal-12.96b14f32.svg\";","export default __webpack_public_path__ + \"static/media/animal-13.cc352efd.svg\";","export default __webpack_public_path__ + \"static/media/animal-14.c036bd2f.svg\";","export default __webpack_public_path__ + \"static/media/animal-15.f66fd334.svg\";","export default __webpack_public_path__ + \"static/media/animal-16.f1d1c8e7.svg\";","export default __webpack_public_path__ + \"static/media/animal-17.54c2921c.svg\";","export default __webpack_public_path__ + \"static/media/animal-18.a79f5287.svg\";","export default __webpack_public_path__ + \"static/media/animal-19.4e1f038c.svg\";","export default __webpack_public_path__ + \"static/media/animal-2.3cbc9f33.svg\";","export default __webpack_public_path__ + \"static/media/animal-20.582e64c1.svg\";","export default __webpack_public_path__ + \"static/media/animal-21.f994a910.svg\";","export default __webpack_public_path__ + \"static/media/animal-22.614f36ff.svg\";","export default __webpack_public_path__ + \"static/media/animal-23.fe8cb713.svg\";","export default __webpack_public_path__ + \"static/media/animal-24.14d93b91.svg\";","export default __webpack_public_path__ + \"static/media/animal-25.f89249c7.svg\";","export default __webpack_public_path__ + \"static/media/animal-26.eadc71e3.svg\";","export default __webpack_public_path__ + \"static/media/animal-27.bf6ff131.svg\";","export default __webpack_public_path__ + \"static/media/animal-28.09ad8851.svg\";","export default __webpack_public_path__ + \"static/media/animal-29.c4891a44.svg\";","export default __webpack_public_path__ + \"static/media/animal-3.b9cd90a5.svg\";","export default __webpack_public_path__ + \"static/media/animal-30.32b79d90.svg\";","export default __webpack_public_path__ + \"static/media/animal-31.cbbd4ac7.svg\";","export default __webpack_public_path__ + \"static/media/animal-32.dd4496ad.svg\";","export default __webpack_public_path__ + \"static/media/animal-33.bf71ffc1.svg\";","export default __webpack_public_path__ + \"static/media/animal-34.a42b2762.svg\";","export default __webpack_public_path__ + \"static/media/animal-35.05a0f752.svg\";","export default __webpack_public_path__ + \"static/media/animal-36.87183ca8.svg\";","export default __webpack_public_path__ + \"static/media/animal-37.601a5569.svg\";","export default __webpack_public_path__ + \"static/media/animal-38.7c8e43d8.svg\";","export default __webpack_public_path__ + \"static/media/animal-39.a19f4cd1.svg\";","export default __webpack_public_path__ + \"static/media/animal-4.3b05a1a7.svg\";","export default __webpack_public_path__ + \"static/media/animal-40.81b1b2fa.svg\";","export default __webpack_public_path__ + \"static/media/animal-41.98e86830.svg\";","export default __webpack_public_path__ + \"static/media/animal-42.db86b736.svg\";","export default __webpack_public_path__ + \"static/media/animal-43.1b46c38c.svg\";"],"sourceRoot":""}